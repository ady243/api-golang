services:
  api:
    build: .
    container_name: api
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      - postgres
      - dragonfly
    networks:
      - postgres-network
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}"
      DRAGONFLY_HOST: ${DRAGONFLY_HOST}
    volumes:
      - .:/app
      
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: unless-stopped
    volumes:
      - postgres-test:/var/lib/postgresql/data
    networks:
      - postgres-network

  dragonfly:
    image: "docker.dragonflydb.io/dragonflydb/dragonfly"
    container_name: dragonfly_container
    ports:
      - "${DRAGONFLY_PORT}:${DRAGONFLY_PORT}"
    restart: unless-stopped
    volumes:
      - dragonflydata:/data
    networks:
      - postgres-network

  adminer:
    image: adminer
    container_name: adminer_container
    ports:
      - 8080:8080
    networks:
      - postgres-network

volumes:
  dragonflydata:
  postgres-test: { }

networks:
  postgres-network:
    driver: bridge
