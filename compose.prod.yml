services:
  api:
    build: .
    container_name: api
    dockerfile: Dockerfile.prod
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      - postgres
      - dragonfly
      - redis
    networks:
      - postgres-network
      - mynetwork
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_USER: ${EMAIL_USER}
      DRAGONFLY_HOST: dragonfly
      DRAGONFLY_PORT: 6379 
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD:
    volumes:
      - .:/app

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: unless-stopped
    volumes:
      - postgres-test:/var/lib/postgresql/data
    networks:
      - postgres-network

  dragonfly:
    image: "docker.dragonflydb.io/dragonflydb/dragonfly"
    container_name: dragonfly_container
    ports:
      - "6380:6379" 
    restart: unless-stopped
    volumes:
      - dragonflydata:/data
    networks:
      - mynetwork

  redis:
    image: redis:8.0-M01-bookworm
    restart: "no"
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

    networks:
      - mynetwork

  adminer:
    image: adminer
    container_name: adminer_container
    ports:
      - 8080:8080
    networks:
      - postgres-network

volumes:
  dragonflydata: {}
  postgres-test: {}
  redis-data: {}

networks:
  postgres-network:
    driver: bridge
  mynetwork:
    driver: bridge