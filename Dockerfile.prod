# Étape 1 : Construction de l'application dans une image Golang
FROM golang:1.22 AS BUILDER

# Définir le répertoire de travail à l'intérieur du conteneur
WORKDIR /app

# Copier les fichiers de dépendances (go.mod et go.sum) dans l'image
COPY go.mod go.sum ./

# Télécharger les dépendances nécessaires
RUN go mod download

# Copier tout le code source de l'application
COPY . .

# Construire l'application Go en mode production
RUN go build -o app .

# Étape 2 : Créer l'image finale pour exécuter l'application
FROM ubuntu:22.04

# Installer les dépendances nécessaires
RUN apt-get update && apt-get install -y \
    libc6 \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Télécharger et installer wait-for-it
RUN wget -O /usr/local/bin/wait-for-it https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh \
    && chmod +x /usr/local/bin/wait-for-it

# Définir le répertoire de travail
WORKDIR /app

# Copier l'application compilée depuis l'image BUILDER
COPY --from=BUILDER /app/app /app

# Copier le fichier .env
COPY .env /app/.env

# Vérifier si le fichier .env existe
RUN if [ ! -f /app/.env ]; then echo "Warning: .env file not found." && exit 1; fi

# Exposer le port sur lequel l'API écoutera
EXPOSE 3003

# Vérification de la présence du binaire et démarrage de l'application
CMD ["sh", "-c", "if [ -f ./app ]; then ./app; else echo 'App binary not found!' && exit 1; fi"]
